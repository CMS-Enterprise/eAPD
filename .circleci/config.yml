version: 2.1

workflows:
  version: 2

  # Workflow to cleanup preview deploys from AWS.  Runs every two hours.
  #  cleanup preview deploys:
  #    triggers:
  #      - schedule:
  # Run every hour, every day. Specified this way because the more
  # compact cron syntax wasn't working.
  #          cron: "0 0 * * *"
  #          filters:
  #            branches:
  #              only:
  #                - master
  #    jobs:
  #      - cleanup preview deploys

  # Workflow to scan dependencies for vulnerabilities every night
  nightly dependency vulnerability scan:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - main
    jobs:
      - install dependencies
      - dependency vulnerability scan:
          name: backend dependency vulnerability scan
          path: api
          requires:
            - install dependencies
      - dependency vulnerability scan:
          name: frontend dependency vulnerability scan
          path: web
          requires:
            - install dependencies

  # Workflow to test, build, and deploy the backend and frontend
  test, build, and deploy:
    jobs:
      # independent jobs
      - install dependencies:
          filters:
            tags:
              only: /.*/
      - owasp zap scan:
          filters:
            tags:
              ignore: ignore-owasp
      - validate openapi:
          context:
            - docker-hub-creds
          filters:
            tags:
              only: /.*/
      - yaml test:
          context:
            - docker-hub-creds
          filters:
            tags:
              only: /.*/

      # backend jobs
      - backend api endpoint test:
          context:
            - docker-hub-creds      
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - dependency vulnerability scan:
          filters:
            tags:
              only: /.*/
          name: backend dependency vulnerability scan
          path: api
          requires:
            - install dependencies
      - backend lint:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - backend unit test:
          context:
            - docker-hub-creds      
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - backend deploy:
          name: backend deploy staging
          env: STAGING
          filters:
            branches:
              only:
                - main
          requires:
            - store artifacts staging
            - backend api endpoint test
            - backend dependency vulnerability scan
            - backend lint
            - backend unit test
      - backend deploy:
          name: backend deploy prod
          env: PRODUCTION
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - store artifacts prod
            - backend api endpoint test
            - backend dependency vulnerability scan
            - backend lint
            - backend unit test

      # frontend jobs
      - dependency vulnerability scan:
          filters:
            tags:
              only: /.*/
          name: frontend dependency vulnerability scan
          path: web
          requires:
            - install dependencies
      - frontend lint:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - frontend test:
          context:
            - docker-hub-creds      
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
            - yaml test
      - frontend build:
          name: frontend build preview
          env: PRODUCTION
          filters:
            branches:
              ignore:
                - main
          requires:
            - validate openapi
            - owasp zap scan
            - frontend lint
            - backend lint
            - frontend dependency vulnerability scan
            - backend dependency vulnerability scan
            - frontend test
            - yaml test
            - backend unit test
            - backend api endpoint test
            
      - frontend build:
          name: frontend build prod
          env: PRODUCTION
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - frontend dependency vulnerability scan
      - frontend build:
          name: frontend build staging
          env: STAGING
          filters:
            branches:
              only:
                - main
          requires:
            - frontend dependency vulnerability scan
      - frontend deploy:
          name: frontend deploy staging
          env: STAGING
          filters:
            branches:
              only:
                - main
          requires:
            - frontend build staging
            - frontend dependency vulnerability scan
            - frontend lint
            - frontend test
            - yaml test
      - frontend deploy:
          name: frontend deploy production
          env: PRODUCTION
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - frontend build prod
            - frontend dependency vulnerability scan
            - frontend lint
            - frontend test
            - yaml test

      # joint jobs
      - preview deploy:
          filters:
            branches:
              ignore:
                - main
            tags:
              ignore: /^noinfra.*/
          requires:
            - frontend build preview
            - yaml test

      - store artifacts:
          name: store artifacts staging
          filters:
            branches:
              only:
                - main
          requires:
            - backend dependency vulnerability scan
            - frontend build staging

      - store artifacts:
          name: store artifacts prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - backend dependency vulnerability scan
            - frontend build prod

jobs:
  # ===== Independent jobs =====
  # These jobs don't rely on anything else having happened first, and cut
  # across both backend and frontend.

  # Installs npm dependencies for the frontend and backend pieces, then saves
  # those in the workflow workspace. Save the npm cache to CircleCI cache to
  # speed up subsequent builds, but don't save the dependencies to cache
  # because "npm ci" deletes the node_modules folder anyway so it's pointless.
  install dependencies:
    docker:
      - image: cimg/node:14.16.1
#      - image: node:14
        auth:
          username: $DOCKER_INSTALL_DEPS_UN
          password: $DOCKER_INSTALL_DEPS_PW
    steps:
      - checkout
      - restore_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: install web dependencies
          working_directory: ~/project/web
          command: npm ci
      - run:
          name: install api dependencies
          working_directory: ~/project/api
          command: npm ci
      - save_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
          paths:
            - /root/.npm
      - persist_to_workspace:
          root: ~/project
          paths:
            - api/node_modules
            - web/node_modules

  # Runs an OpenAPI validator on the API spec generated by our code to ensure
  # it's a valid OpenAPI document.
  validate openapi:
    docker:
      - image: cimg/node:14.16.1    
      #- image: circleci/node:14
        auth:
          username: $DOCKER_VALIDATE_OPENAPI_UN
          password: $DOCKER_VALIDATE_OPENAPI_PW
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: save OpenAPI JSON
          command: node -e "console.log(JSON.stringify(require('./api/routes/openAPI/index.js')))" > openapi.json
      - run:
          name: validate
          command: |
            echo "$DOCKER_VALIDATE_OPENAPI_PW" |docker login -u $DOCKER_VALIDATE_OPENAPI_UN --password-stdin
            docker create -v /openapi --name openapi alpine /bin/true
            docker cp ./openapi.json openapi:/openapi
            docker run --volumes-from openapi -w /openapi usabillabv/openapi3-validator openapi.json

  # Validates YAML files. Doesn't look at content, just structure. Doesn't
  # enforce a schema either - strictly checks that the files are valid YAML.
  yaml test:
    docker:
      - image: cimg/node:14.16.1    
      #- image: node:14
        auth:
          username: $DOCKER_TESTS_UN
          password: $DOCKER_TESTS_PW
    steps:
      - checkout
      - run: npm install glob
      - run: npm install js-yaml
      - run:
          working_directory: ~/project/web
          command: node yaml-tests.js

  # ===== Backend jobs =====
  # These all depend on "install dependencies" running first.

  # Runs backend API integration/end-to-end tests.
  backend api endpoint test:
    machine: #true
      image: ubuntu-2004:202104-01
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: build API image
          working_directory: ~/project/api
          command: |
            echo "$DOCKER_TESTS_PW" |docker login -u $DOCKER_TESTS_UN --password-stdin
            docker build -t cms-eapd/api ./
      - run:
          name: run tests
          working_directory: ~/project/api
          command: |
            # Switch to Node 14.
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 14
            nvm alias default v14
            ./endpoint-tests/endpoint.sh

  # Lints the backend code.
  backend lint:
    docker:
      - image: cimg/node:14.16.1    
      #- image: node:14
        auth:
          username: $DOCKER_LINT_UN
          password: $DOCKER_LINT_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: run linter
          working_directory: ~/project/api
          command: npm run lint

  # Runs backend unit tests and reports coverage to codecov.io.
  backend unit test:
    machine: #true
      image: ubuntu-2004:202104-01
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: build API image
          working_directory: ~/project/api
          command: |
            echo "$DOCKER_TESTS_PW" |docker login -u $DOCKER_TESTS_UN --password-stdin
            docker build -t cms-eapd/api ./
      - run:
          name: run tests
          working_directory: ~/project/api
          command: |
            # Switch to Node 14.
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 14
            nvm alias default v14
            ./unit-test.sh
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/api
          command: bash <(curl -s https://codecov.io/bash)

  # ===== Frontend jobs =====
  # These all depend on "install dependencies" running first.

  # Builds the static web app into the ~/project/web/dist directory and then
  # saves that into the workflow workspace.
  frontend build:
    parameters:
      env:
        description: The environment being deployed
        type: string
    docker:
      - image: cimg/node:14.16.1    
      #- image: node:14
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: build the web app
          working_directory: ~/project/web
          command: API_URL="${<< parameters.env >>_WEB_API_URL}" OKTA_DOMAIN="${<< parameters.env >>_OKTA_DOMAIN}" OKTA_SERVER_ID="${<< parameters.env >>_OKTA_SERVER_ID}" OKTA_CLIENT_ID="${<< parameters.env >>_OKTA_CLIENT_ID}" JWT_SECRET="${<< parameters.env >>_JWT_SECRET}" MONGO_INITDB_DATABASE="${<< parameters.env >>_MONGO_INITDB_DATABASE}" MONGO_URL="${<< parameters.env >>_MONGO_URL}" npm run build
      - persist_to_workspace:
          root: ~/project
          paths:
            - web/dist

  # Lints the frontend code.
  frontend lint:
    docker:
      - image: cimg/node:14.16.1    
      #- image: node:14
        auth:
          username: $DOCKER_LINT_UN
          password: $DOCKER_LINT_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: run linter
          working_directory: ~/project/web
          command: npm run lint

  # Runs frontend tests and reports coverage to codecov.io.
  frontend test:
    docker:
      - image: cimg/node:14.16.1
      #- image: node:14
        auth:
          username: $DOCKER_TESTS_UN
          password: $DOCKER_TESTS_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: run tests
          working_directory: ~/project/web
          command: npm test -- --runInBand
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/web
          command: bash <(curl -s https://codecov.io/bash)

  # ===== Shared jobs =====
  # These all depend on "install dependencies" running first.

  # Uses audit-ci to scan the installed dependencies for known vulnerabilities.
  dependency vulnerability scan:
    parameters:
      path:
        description: The path to test
        type: string
    docker:
      - image: cimg/node:14.16.1    
      #- image: node:14
        auth:
          username: $DOCKER_DEPS_VULN_UN
          password: $DOCKER_DEPS_VULN_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: vulnerability scan
          working_directory: ~/project/<< parameters.path >>
          command: |
            npm run audit

  owasp zap scan:
    machine: #true
      image: ubuntu-2004:202104-01
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: build API image
          working_directory: ~/project/api
          command: |
            echo "$DOCKER_OWASP_ZAP_SCAN_PW" |docker login -u $DOCKER_OWASP_ZAP_SCAN_UN --password-stdin
            docker build -t cms-eapd/api ./
      - run:
          name: start everything up
          working_directory: ~/project/api
          command: |
            echo "$DOCKER_OWASP_ZAP_SCAN_PW" |docker login -u $DOCKER_OWASP_ZAP_SCAN_UN --password-stdin
            docker-compose -f docker-compose.endpoint-tests.yml up -d
            docker-compose -f docker-compose.endpoint-tests.yml exec api-for-testing npm run migrate
            docker-compose -f docker-compose.endpoint-tests.yml exec api-for-testing npm run seed
      - run:
          name: pull owasp zap docker image
          command: |
            echo "$DOCKER_OWASP_ZAP_SCAN_PW" |docker login -u $DOCKER_OWASP_ZAP_SCAN_UN --password-stdin
            docker pull owasp/zap2docker-stable
      - run:
          name: run owasp zap
          command: |
            echo "$DOCKER_OWASP_ZAP_SCAN_PW" |docker login -u $DOCKER_OWASP_ZAP_SCAN_UN --password-stdin
            docker run \
              --network api_default \
              -v "$(pwd)/owasp":/zap/wrk \
              owasp/zap2docker-stable \
              zap-api-scan.py \
              -c api-scan.conf \
              -t http://api-for-testing:8000/open-api \
              -f openapi

  # ===== Deployment jobs =====
  # These may have varying prerequisites, but they're grouped here because
  # they are all related to deployment.

  # Backend production deployment.
  backend deploy:
    parameters:
      env:
        description: The environment being deployed
        type: string
    docker:
      - image: cimg/python:3.10.1
      #- image: python:3
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: deploy to production
          working_directory: ~/project/bin/prod-deploy
          command: |
            sudo apt-get -qq update
            sudo apt-get -qq install jq -y
            pip install --quiet awscli
            ./aws.sh \
              --API_AWS_ACCESS_KEY_ID "${<< parameters.env >>_API_AWS_ACCESS_KEY_ID}" \
              --API_AWS_SECRET_ACCESS_KEY "${<< parameters.env >>_API_AWS_SECRET_ACCESS_KEY}" \
              --API_DATABASE_URL "${<< parameters.env >>_API_DATABASE_URL}" \
              --API_FILE_S3_BUCKET "${<< parameters.env >>_API_FILE_S3_BUCKET}" \
              --API_PBKDF2_ITERATIONS "${<< parameters.env >>_API_PBKDF2_ITERATIONS}" \
              --API_PORT "${<< parameters.env >>_API_PORT}" \
              --API_SESSION_SECRET "${<< parameters.env >>_API_SESSION_SECRET}" \
              --AWS_REGION "${<< parameters.env >>_API_AWS_REGION}" \
              --AWS_SECURITY_GROUP "${<< parameters.env >>_API_AWS_SECURITY_GROUP}" \
              --AWS_SUBNET "${<< parameters.env >>_API_AWS_SUBNET}" \
              --AWS_TARGET_GROUP "${<< parameters.env >>_API_AWS_TARGET_GROUP}" \
              --BUILD_URL "$(cat ../../build-url.txt)/backend.zip" \
              --ENVIRONMENT "$(echo '<< parameters.env >>' | tr '[:upper:]' '[:lower:]')" \
              --OKTA_DOMAIN "${<< parameters.env >>_OKTA_DOMAIN}" \
              --OKTA_SERVER_ID "${<< parameters.env >>_OKTA_SERVER_ID}" \
              --OKTA_CLIENT_ID "${<< parameters.env >>_OKTA_CLIENT_ID}" \
              --OKTA_API_KEY "${<< parameters.env >>_OKTA_API_KEY}" \
              --JWT_SECRET "${<< parameters.env >>_JWT_SECRET}" \
              --MONGO_MONGO_INITDB_DATABASE "${<< parameters.env >>_MONGO_INITDB_DATABASE}" \
              --MONGO_URL "${<< parameters.env >>_MONGO_URL}"

      - run:
          when: on_fail
          name: notify on deployment failure
          command: |
            if [ -n "${SLACK_WEBHOOK_URL}" ]; then
              curl -X "POST" "${SLACK_WEBHOOK_URL}" \
                -H "Content-Type: application/json; charset=utf-8" \
                -d $'{
                  "attachments": [
                    {
                      "color": "#d83933",
                      "fallback": "<< parameters.env >> backend deployment has failed",
                      "text": "<< parameters.env >> backend deployment has failed"
                    }
                  ]
                }'
            fi
            false

  # Cleans up preview deploys that are no longer associated with open pull
  # requests.
  #  cleanup preview deploys:
  #    docker:
  #      - image: python:3
  #    steps:
  #      - checkout
  #      - run:
  #          name: cleanup deploys with no open PR
  #          working_directory: ~/project/bin/preview-deploy
  #          command: |
  #            apt-get -qq update
  #            apt-get -qq install jq -y
  #            pip install --quiet awscli
  #            ./aws.cleanup.sh \
  #              --AWS_REGION "$PRODUCTION_API_AWS_REGION" \
  #              --GH_BOT_TOKEN "$GH_BOT_TOKEN" \
  #              --GH_BOT_USER "$GH_BOT_USER"

  # Frontend production deployment.
  frontend deploy:
    parameters:
      env:
        description: The environment being deployed
        type: string
    docker:
      - image: cimg/python:3.10.1
      #- image: python:3
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: sync to s3
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
            aws s3 sync web/dist s3://"${<< parameters.env >>_WEB_AWS_S3_BUCKET}" --region ${<< parameters.env >>_WEB_AWS_REGION} --delete
            # Copy up index.html separately, so we can set metadata on it to
            # disable client cacheing
            aws s3 cp web/dist/index.html s3://"${<< parameters.env >>_WEB_AWS_S3_BUCKET}/index.html" --cache-control no-cache --region ${<< parameters.env >>_WEB_AWS_REGION}
      - run:
          when: on_fail
          name: notify on deployment failure
          command: |
            if [ -n "${SLACK_WEBHOOK_URL}" ]; then
              curl -X "POST" "${SLACK_WEBHOOK_URL}" \
                -H "Content-Type: application/json; charset=utf-8" \
                -d $'{
                  "attachments": [
                    {
                      "color": "#d83933",
                      "fallback": "<< parameters.env >> frontend deployment has failed",
                      "text": "<< parameters.env >> frontend deployment has failed"
                    }
                  ]
                }'
            fi
            false

  # Preview deployment, used to put up preview links in pull requests
  preview deploy:
    docker:
      - image: cimg/python:3.10.1
      #- image: python:3
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - run:
          name: deploy to preview
          working_directory: ~/project/bin/preview-deploy
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              sudo apt-get -qq update
              sudo apt-get -qq install jq -y
              pip install --quiet awscli
              PRNUM=$(basename $CIRCLE_PULL_REQUEST)
              URL=$(./aws.sh \
                --API_PBKDF2_ITERATIONS "$PREVIEW_API_PBKDF2_ITERATIONS" \
                --AWS_REGION "$PREVIEW_AWS_REGION" \
                --AWS_SECURITY_GROUP "$PREVIEW_AWS_SECURITY_GROUP" \
                --AWS_SUBNET "$PREVIEW_AWS_SUBNET" \
                --BRANCH "$CIRCLE_BRANCH" \
                --PR_NUM "$PRNUM" \
                --OKTA_DOMAIN "$PREVIEW_OKTA_DOMAIN" \
                --OKTA_SERVER_ID "$PREVIEW_OKTA_SERVER_ID" \
                --OKTA_CLIENT_ID "$PREVIEW_OKTA_CLIENT_ID" \
                --OKTA_API_KEY "$PREVIEW_OKTA_API_KEY" \
                --JWT_SECRET "$PREVIEW_JWT_SECRET" \
                --MONGO_INITDB_ROOT_USERNAME "$REVIEW_MONGO_INITDB_ROOT_USERNAME" \
                --MONGO_INITDB_ROOT_PASSWORD "$PREVIEW_MONGO_INITDB_ROOT_PASSWORD" \
                --MONGO_INITDB_DATABASE "$PREVIEW_MONGO_INITDB_DATABASE" \
                --MONGO_DATABASE_USERNAME "$PREVIEW_MONGO_DATABASE_USERNAME" \
                --MONGO_DATABASE_PASSWORD "$PREVIEW_MONGO_DATABASE_PASSWORD" \
                --MONGO_DATABASE "$PREVIEW_MONGO_DATABASE" \
                --MONGO_URL "$PREVIEW_MONGO_URL" 
              )
              ./github-comment.sh "$PRNUM" "https://$URL" "$CIRCLE_SHA1"
            else
              echo "Not a pull request"
            fi
      - run:
          name: Check Docker Pull Limit Default User
          command: |
            TOKEN=$(curl --user "$DOCKER_USERNAME:$DOCKER_PASSWORD" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
            curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest 2>&1 |egrep "ratelimit-limit|ratelimit-remaining"
      - run:
          name: Check Docker Pull Limit OpenAPI User
          command: |
            TOKEN=$(curl --user "$DOCKER_VALIDATE_OPENAPI_UN:$DOCKER_VALIDATE_OPENAPI_PW" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
            curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest 2>&1 |egrep "ratelimit-limit|ratelimit-remaining"
      - run:
          name: Check Docker Pull Limit Vulnerablity User
          command: |
            TOKEN=$(curl --user "$DOCKER_DEPS_VULN_UN:$DOCKER_DEPS_VULN_PW" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
            curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest 2>&1 |egrep "ratelimit-limit|ratelimit-remaining"
      - run:
          name: Check Docker Pull Limit Dependency User
          command: |
            TOKEN=$(curl --user "$DOCKER_INSTALL_DEPS_UN:$DOCKER_INSTALL_DEPS_PW" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
            curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest 2>&1 |egrep "ratelimit-limit|ratelimit-remaining"
      - run:
          name: Check Docker Pull Limit Lint User
          command: |
            TOKEN=$(curl --user "$DOCKER_LINT_UN:$DOCKER_LINT_PW" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
            curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest 2>&1 |egrep "ratelimit-limit|ratelimit-remaining"
      - run:
          name: Check Docker Pull Limit OWASP User
          command: |
            TOKEN=$(curl --user "$DOCKER_OWASP_ZAP_SCAN_UN:$DOCKER_OWASP_ZAP_SCAN_PW" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
            curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest 2>&1 |egrep "ratelimit-limit|ratelimit-remaining"
      - run:
          name: Check Docker Pull Limit Tests User
          command: |
            TOKEN=$(curl --user "$DOCKER_TESTS_UN:$DOCKER_TESTS_PW" "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
            curl --head -H "Authorization: Bearer $TOKEN" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest 2>&1 |egrep "ratelimit-limit|ratelimit-remaining"
      - run:
          name: Check Docker Pull Limit Unauthorized User            
          command: |
            TOKEN=$(curl "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token)
            echo $TOKEN
            
  # Zips up artifacts created in build steps and makes them available as
  # CircleCI artifact downloads.
  store artifacts:
    docker:
      - image: cimg/node:14.16.1    
      #- image: node:14
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: create backend build artifact zip
          working_directory: ~/project
          command: |
            apt-get update
            apt-get install zip -y
            cd api
            npm ci --only=production
            cd ..
            zip -r /tmp/backend.zip api/*
            zip -r /tmp/frontend.zip web/dist/*
      - run:
          name: persist build URL to workspace
          command: echo "https://${CIRCLE_BUILD_NUM}-${GH_REPO_ID}-gh.circle-artifacts.com/0" > build-url.txt
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./build-url.txt
      - store_artifacts:
          path: /tmp/backend.zip
          destination: backend.zip
      - store_artifacts:
          path: /tmp/frontend.zip
          destination: frontend.zip
