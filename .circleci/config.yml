version: 2.1

workflows:
  version: 2

  # Workflow to cleanup preview deploys from AWS.  Runs every two hours.
  cleanup preview deploys:
    triggers:
      - schedule:
          # Run every hour, every day. Specified this way because the more
          # compact cron syntax wasn't working.
          cron: '0 * * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - cleanup preview deploys

  # Workflow to test, build, and deploy the backend and frontend
  test, build, and deploy:
    jobs:
      # independent jobs
      - check docker-compose image tags:
          filters:
            tags:
              only: /.*/
      - install dependencies:
          filters:
            tags:
              only: /.*/
      - validate openapi:
          filters:
            tags:
              only: /.*/
      - yaml test:
          filters:
            tags:
              only: /.*/

      # backend jobs
      - backend api endpoint test:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - dependency vulnerability scan:
          filters:
            tags:
              only: /.*/
          name: backend dependency vulnerability scan
          path: api
          requires:
            - install dependencies
      - backend lint:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - backend unit test:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - backend deploy:
          name: backend deploy staging
          env: STAGING
          filters:
            branches:
              only:
                - master
          requires:
            - store artifacts staging
            - backend api endpoint test
            - backend dependency vulnerability scan
            - backend lint
            - backend unit test
      - backend deploy:
          name: backend deploy prod
          env: PRODUCTION
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - store artifacts prod
            - backend api endpoint test
            - backend dependency vulnerability scan
            - backend lint
            - backend unit test

      # frontend jobs
      - dependency vulnerability scan:
          filters:
            tags:
              only: /.*/
          name: frontend dependency vulnerability scan
          path: web
          requires:
            - install dependencies
      - frontend lint:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - frontend test:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
            - yaml test
      - frontend build:
          name: frontend build preview
          env: PRODUCTION
          filters:
            branches:
              ignore:
                - master
          requires:
            - frontend dependency vulnerability scan
      - frontend build:
          name: frontend build prod
          env: PRODUCTION
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - frontend dependency vulnerability scan
      - frontend build:
          name: frontend build staging
          env: STAGING
          filters:
            branches:
              only:
                - master
          requires:
            - frontend dependency vulnerability scan
      - frontend deploy:
          name: frontend deploy staging
          env: STAGING
          filters:
            branches:
              only:
                - master
          requires:
            - frontend build staging
            - frontend dependency vulnerability scan
            - frontend lint
            - frontend test
            - yaml test
      - frontend deploy:
          name: frontend deploy production
          env: PRODUCTION
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - frontend build prod
            - frontend dependency vulnerability scan
            - frontend lint
            - frontend test
            - yaml test

      # joint jobs
      - preview deploy:
          filters:
            branches:
              ignore:
                - master
          requires:
            - backend dependency vulnerability scan
            - frontend build preview
            - frontend dependency vulnerability scan
            - yaml test

      - store artifacts:
          name: store artifacts staging
          filters:
            branches:
              only:
                - master
          requires:
            - backend dependency vulnerability scan
            - frontend build staging

      - store artifacts:
          name: store artifacts prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - backend dependency vulnerability scan
            - frontend build prod

jobs:
  # ===== Independent jobs =====
  # These jobs don't rely on anything else having happened first, and cut
  # across both backend and frontend.

  # Checks that the image tags in the docker-compose.yml file match the md5
  # hashes of the backend and frontend package-lock.json files.
  check docker-compose image tags:
    docker:
      - image: node:10
    steps:
      - checkout
      - run:
          name: check docker-compose image tags
          working_directory: ~/project
          command: |
            echo "`cat docker-compose.yml | grep -m1 cms-eapd/api: | sed 's/.*image: cms-eapd\/api://'` api/package-lock.json" > hashes.md5
            echo "`cat docker-compose.yml | grep -m1 cms-eapd/web: | sed 's/.*image: cms-eapd\/web://'` web/package-lock.json" >> hashes.md5
            md5sum -c hashes.md5

  # Installs npm dependencies for the frontend and backend pieces, then saves
  # those in the workflow workspace. Save the npm cache to CircleCI cache to
  # speed up subsequent builds, but don't save the dependencies to cache
  # because "npm ci" deletes the node_modules folder anyway so it's pointless.
  install dependencies:
    docker:
      - image: node:10
    steps:
      - checkout
      - restore_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: install web dependencies
          working_directory: ~/project/web
          command: npm ci
      - run:
          name: install api dependencies
          working_directory: ~/project/api
          command: npm ci
      - save_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
          paths:
            - /root/.npm
      - persist_to_workspace:
          root: ~/project
          paths:
            - api/node_modules
            - web/node_modules

  # Runs an OpenAPI validator on the API spec generated by our code to ensure
  # it's a valid OpenAPI document.
  validate openapi:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: save OpenAPI JSON
          command: node -e "console.log(JSON.stringify(require('./api/routes/openAPI/index.js')))" > openapi.json
      - run:
          name: validate
          command: |
            docker create -v /openapi --name openapi alpine /bin/true
            docker cp ./openapi.json openapi:/openapi
            docker run --volumes-from openapi -w /openapi usabillabv/openapi3-validator openapi.json

  # Validates YAML files. Doesn't look at content, just structure. Doesn't
  # enforce a schema either - strictly checks that the files are valid YAML.
  yaml test:
    docker:
      - image: node:10
    steps:
      - checkout
      - run: npm install glob
      - run: npm install js-yaml
      - run: 
          working_directory: ~/project/web
          command: node yaml-tests.js

  # ===== Backend jobs =====
  # These all depend on "install dependencies" running first.

  # Runs backend API integration/end-to-end tests.
  backend api endpoint test:
    docker:
      - image: node:10
        environment:
          - NODE_ENV=test
          - STORE_TYPE=fs
          - STORE_PATH=test-data/files
          - ENDPOINT_COVERAGE_CAPTURE=yes
      - image: postgres:latest
        name: db
        environment:
          - POSTGRES_USER=postgres
          - POSTGRES_PASSWORD=cms
          - POSTGRES_DB=hitech_apd_test
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: get wait-on
          command: |
            npm i -g wait-on
      - run:
          name: wait for database
          command: wait-on tcp:db:5432 -t 300000
      - run:
          name: database migration
          working_directory: ~/project/api
          command: npm run migrate
      - run:
          name: database seed
          working_directory: ~/project/api
          command: npm run seed
      - run:
          name: start the API
          working_directory: ~/project/api
          command: echo "[]" > endpoint-data.json && npm start
          background: true
      - run:
          name: wait for API
          command: wait-on tcp:localhost:8000 -t 300000
      - run:
          name: run tests
          working_directory: ~/project/api
          command: npm run test-endpoints
      - run:
          name: print coverage info
          working_directory: ~/project/api
          command: mv endpoint-data.json endpoint-tests && node endpoint-tests/endpoint-coverage.js

  # Lints the backend code.
  backend lint:
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: run linter
          working_directory: ~/project/api
          command: npm run lint

  # Runs backend unit tests and reports coverage to codecov.io.
  backend unit test:
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: run tests
          working_directory: ~/project/api
          command: npm test
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/api
          command: bash <(curl -s https://codecov.io/bash)

  # ===== Frontend jobs =====
  # These all depend on "install dependencies" running first.

  # Builds the static web app into the ~/project/web/dist directory and then
  # saves that into the workflow workspace.
  frontend build:
    parameters:
      env:
        description: The environment being deployed
        type: string
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: build the web app
          working_directory: ~/project/web
          command: API_URL="${<< parameters.env >>_WEB_API_URL}" npm run build
      - persist_to_workspace:
          root: ~/project
          paths:
            - web/dist

  # Lints the frontend code.
  frontend lint:
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: run linter
          working_directory: ~/project/web
          command: npm run lint

  # Runs frontend tests and reports coverage to codecov.io.
  frontend test:
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: run tests
          working_directory: ~/project/web
          command: npm test -- --runInBand
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/web
          command: bash <(curl -s https://codecov.io/bash)

  # ===== Shared jobs =====
  # These all depend on "install dependencies" running first.

  # Uses snyk to scan the installed dependencies for known vulnerabilities.
  # Using the CLI instead of the web app means it scans actually-installed
  # dependencies instead of "potentially-installed" dependencies, as inferred
  # from the package.json file.
  dependency vulnerability scan:
    parameters:
      path:
        description: The path to test
        type: string
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: vulnerability scan
          working_directory: ~/project/<< parameters.path >>
          command: |
            npx snyk auth $SNYK_TOKEN
            npx snyk test

  # ===== Deployment jobs =====
  # These may have varying prerequisites, but they're grouped here because
  # they are all related to deployment.

  # Backend production deployment.
  backend deploy:
    parameters:
      env:
        description: The environment being deployed
        type: string
    docker:
      - image: python:3
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: deploy to production
          working_directory: ~/project/bin/prod-deploy
          command: |
            apt-get -qq update
            apt-get -qq install jq -y
            pip install --quiet awscli
            ./aws.sh \
              --API_DATABASE_URL "${<< parameters.env >>_API_DATABASE_URL}" \
              --API_PBKDF2_ITERATIONS "${<< parameters.env >>_API_PBKDF2_ITERATIONS}" \
              --API_PORT "${<< parameters.env >>_API_PORT}" \
              --API_SESSION_SECRET "${<< parameters.env >>_API_SESSION_SECRET}" \
              --AWS_AMI "${<< parameters.env >>_API_AWS_AMI}" \
              --AWS_REGION "${<< parameters.env >>_API_AWS_REGION}" \
              --AWS_SECURITY_GROUP "${<< parameters.env >>_API_AWS_SECURITY_GROUP}" \
              --AWS_SUBNET "${<< parameters.env >>_API_AWS_SUBNET}" \
              --AWS_TARGET_GROUP "${<< parameters.env >>_API_AWS_TARGET_GROUP}" \
              --BUILD_URL "$(cat ../../build-url.txt)/backend.zip" \
              --ENVIRONMENT "$(echo '<< parameters.env >>' | tr '[:upper:]' '[:lower:]')"

  # Cleans up preview deploys that are no longer associated with open pull
  # requests.
  cleanup preview deploys:
    docker:
      - image: python:3
    steps:
      - checkout
      - run:
          name: cleanup deploys with no open PR
          working_directory: ~/project/bin/preview-deploy
          command: |
            apt-get -qq update
            apt-get -qq install jq -y
            pip install --quiet awscli
            ./aws.cleanup.sh

  # Frontend production deployment.
  frontend deploy:
    parameters:
      env:
        description: The environment being deployed
        type: string
    docker:
      - image: python:3
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: sync to s3
          command: |
            apt-get update
            apt-get install awscli -y
            aws s3 sync web/dist "${<< parameters.env >>_WEB_AWS_S3_BUCKET}" --region ${<< parameters.env >>_WEB_AWS_REGION} --delete
  
  # Preview deployment, used to put up preview links in pull requests
  preview deploy:
    docker:
      - image: python:3
    steps:
      - checkout
      - run:
          name: deploy to preview
          working_directory: ~/project/bin/preview-deploy
          command: |
            if [ -n "$CI_PULL_REQUESTS" ]; then
              apt-get -qq update
              apt-get -qq install jq -y
              pip install --quiet awscli
              PRNUM=$(basename $CI_PULL_REQUESTS)
              URL=$(./aws.sh \
                --API_PBKDF2_ITERATIONS "$PRODUCTION_API_PBKDF2_ITERATIONS" \
                --AWS_REGION "$PRODUCTION_API_AWS_REGION" \
                --PR_NUM "$PRNUM" \
                --BRANCH "$CIRCLE_BRANCH"
              )
              ./github-comment.sh "$PRNUM" "https://$URL" "$CIRCLE_SHA1"
            else
              echo "Not a pull request"
            fi

  # Zips up artifacts created in build steps and makes them available as
  # CircleCI artifact downloads.
  store artifacts:
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: create backend build artifact zip
          working_directory: ~/project
          command: |
            apt-get update
            apt-get install zip -y
            rm -rf api/seeds/development
            rm -rf api/seeds/test
            rm api/seeds/development.js
            rm api/seeds/test.js
            rm api/seeds/shared/delete-everything.js
            cd api
            npm ci --only=production
            cd ..
            zip -r /tmp/backend.zip api/*
            zip -r /tmp/frontend.zip web/dist/*
      - run:
          name: persist build URL to workspace
          command: echo "https://${CIRCLE_BUILD_NUM}-${GH_REPO_ID}-gh.circle-artifacts.com/0" > build-url.txt
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./build-url.txt
      - store_artifacts:
          path: /tmp/backend.zip
          destination: backend.zip
      - store_artifacts:
          path: /tmp/frontend.zip
          destination: frontend.zip