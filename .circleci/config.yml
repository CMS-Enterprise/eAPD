version: 2
jobs:
  prepare dependencies cache:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: update npm
          command: npm install -g npm@6
      - run:
          name: install web dependencies
          working_directory: ~/project/web
          command: npm ci
      - run:
          name: install api dependencies
          working_directory: ~/project/api
          command: npm ci
      - save_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
          paths:
            - /root/.npm
      - save_cache:
          key: v1-cms-hitech-apd-{{ checksum "web/package-lock.json" }}
          paths:
            - web/node_modules
      - save_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
          paths:
            - api/node_modules

  web dependency vulnerability scan:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-apd-{{ checksum "web/package-lock.json" }}
      - run:
          name: vulnerability scan
          working_directory: ~/project/web
          command: |
            npx snyk auth $SNYK_TOKEN
            npx snyk test

  web lint:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-apd-{{ checksum "web/package-lock.json" }}
      - run:
          name: run linter
          working_directory: ~/project/web
          command: npm run lint

  web test:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-apd-{{ checksum "web/package-lock.json" }}
      - run:
          name: run tests
          working_directory: ~/project/web
          command: npm test
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/web
          command: bash <(curl -s https://codecov.io/bash)

  validate openapi:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: save OpenAPI JSON
          command: node -e "console.log(JSON.stringify(require('./api/routes/openAPI/index.js')))" > openapi.json
      - run:
          name: validate
          command: |
            docker create -v /openapi --name openapi alpine /bin/true
            docker cp ./openapi.json openapi:/openapi
            docker run --volumes-from openapi -w /openapi usabillabv/openapi3-validator openapi.json

  api dependency vulnerability scan:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
      - run:
          name: vulnerability scan
          working_directory: ~/project/api
          command: |
            npx snyk auth $SNYK_TOKEN
            npx snyk test

  api lint:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
      - run:
          name: run linter
          working_directory: ~/project/api
          command: npm run lint

  api unit test:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
      - run:
          name: run tests
          working_directory: ~/project/api
          command: npm test
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/api
          command: bash <(curl -s https://codecov.io/bash)

  api endpoint test:
    docker:
      - image: node:8
        environment:
          - NODE_ENV=test
          - STORE_TYPE=fs
          - STORE_PATH=endpoint-tests/files
      - image: postgres:latest
        name: db
        environment:
          - POSTGRES_USER=postgres
          - POSTGRES_PASSWORD=cms
          - POSTGRES_DB=hitech_apd_test

    steps:
      - checkout
      - restore_cache:
          key: v1-cms-hitech-api-{{ checksum "api/package-lock.json" }}
      - run:
          name: get wait-on
          command: |
            npm i -g wait-on
      - run:
          name: wait for database
          command: wait-on tcp:db:5432 -t 300000
      - run:
          name: database migration
          working_directory: ~/project/api
          command: npm run migrate
      - run:
          name: database seed
          working_directory: ~/project/api
          command: npm run seed
      - run:
          name: start the API
          working_directory: ~/project/api
          command: npm start
          background: true
      - run:
          name: wait for API
          command: wait-on tcp:localhost:8000 -t 300000
      - run:
          name: run tests
          working_directory: ~/project/api
          command: npm run test-endpoints

  deploy staging:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: update npm
          command: npm install -g npm@6
      - run:
          name: deploy to prod
          command: ./bin/deploy.sh
      - store_artifacts:
          path: /tmp/webapp.zip
          destination: build

  deploy pr:
    docker:
      - image: node:8
    steps:
      - checkout
      - run:
          name: update npm
          command: npm install -g npm@6
      - run:
          name: deploy for pull request
          command: ./bin/deploy-pr.sh

  deploy ux testing:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: update npm
          command: npm install -g npm@6
      - run:
          name: deploy to UX testing
          command: ./bin/deploy-ux-testing.sh

  deploy storybook:
    docker:
      - image: node:8
    steps:
      - checkout
      - restore_cache:
          key: cms-hitech-apd-npm-{{ checksum "web/package-lock.json" }}-{{ checksum "api/package-lock.json" }}
      - run:
          name: update npm
          command: npm install -g npm@6
      - run:
          name: deploy storybook
          command: ./bin/deploy-storybook.sh

  cleanup PR-specific deploys:
    docker:
      - image: node:8
    steps:
      - checkout
      - run:
          name: run nightly script
          command: ./bin/cleanup-pr-deploys.sh

workflows:
  version: 2
  cleanup:
    triggers:
      - schedule:
          cron: '0 0,2,4,6,8,10,12,14,16,18,20,22 * * *'
          filters:
            branches:
              only:
                - master
    jobs:
      - cleanup PR-specific deploys
  web:
    jobs:
      - prepare dependencies cache
      - web dependency vulnerability scan:
          requires:
            - prepare dependencies cache
      - web lint:
          requires:
            - prepare dependencies cache
      - web test:
          requires:
            - prepare dependencies cache
      - validate openapi:
          requires:
            - prepare dependencies cache
      - api dependency vulnerability scan:
          requires:
            - prepare dependencies cache
      - api lint:
          requires:
            - prepare dependencies cache
      - api unit test:
          requires:
            - prepare dependencies cache
      - api endpoint test:
          requires:
            - prepare dependencies cache
      - deploy pr:
          filters:
            branches:
              ignore:
                - master
          requires:
            - web dependency vulnerability scan
      - deploy staging:
          filters:
            branches:
              only:
                - master
          requires:
            - web test
            - web dependency vulnerability scan
            - api unit test
            - api endpoint test
            - api dependency vulnerability scan
      - request deploy for UX testing:
          type: approval
          filters:
            branches:
              only:
                - master
      - deploy ux testing:
          filters:
            branches:
              only:
                - master
          requires:
            - request deploy for UX testing
            - web test
            - api unit test
            - api endpoint test
      - request deploy for storybook:
          type: approval
          filters:
            branches:
              only:
                - master
      - deploy storybook:
          filters:
            branches:
              only:
                - master
          requires:
            - request deploy for storybook
            - web test
