@import 'react-table/react-table.css';

/* react-table overrides */

.ReactTable .rt-thead.-header {
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.15);
}

.ReactTable .rt-thead .rt-tr {
  font-weight: bold;
  text-align: left;
}

.ReactTable .rt-thead .rt-td,
.ReactTable .rt-thead .rt-th {
  padding: 0.5rem 1rem;
}

.ReactTable .rt-thead .rt-th:focus {
  outline: none;
}

.ReactTable .rt-td,
.ReactTable .rt-th {
  padding: 0.5rem 1rem;
}

.ReactTable.-striped .rt-tr.-odd {
  background-color: var(--grey-light);
}

/* additional styles */

.table th,
.table td {
  border-top: 1px solid;
  border-color: #e7e7e7;
}

.table th.border-none,
.table td.border-none {
  border: 0;
}

.table-fixed {
  table-layout: fixed;
}

.table-condensed th,
.table-condensed td {
  padding: 0.25rem 0.375rem;
}

.table-cms {
  font-size: 12px;
}

.table-cms th {
  background-color: #dae9f7;
  font-weight: 300;
}

.table-cms td {
  background-color: #f3f8fc;
}

.table-cms th,
.table-cms td {
  border-left: 4px solid #fff;
  border-top: 4px solid #fff;
}

.table-cms th:first-child,
.table-cms td:first-child {
  border-left: none;
}

.align-middle > th,
.align-middle > td {
  vertical-align: middle;
}

.table-frozen-wrapper {
  position: relative;
}

.table-frozen-scroller {
  /*margin-left: 100px;*/
  overflow-x: scroll;
  overflow-y: visible;
}

/* spacer only */
.table-frozen-null-cell {
  color: #dae9f7; /* a character is necessary in these cells to match spacing */
}

.table-frozen-left-pane {
  width: 140px; /* arbitrary; must be the same as the first-child width */
  position: absolute;
}

.table-frozen-left-pane td,
.table-frozen-left-pane th {
  border-right: 2px solid #fff; /* only half of normal .table-cms spacing applied otherwise */
  vertical-align: inherit;
}

.table-frozen-data tr > th:first-child,
.table-frozen-data tr > td:first-child {
  min-width: 140px; /* same as table-frozen-col-pane; for some reason just width doesn't work */
}

/* TODO: Make this less fragile. */
.table-frozen-input-header {
  height: 48px; /* this is the height of an input */
}
