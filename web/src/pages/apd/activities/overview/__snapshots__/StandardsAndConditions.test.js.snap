// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`the Schedule (milestones) component renders correctly 1`] = `
<Fragment>
  <label
    htmlFor="standards-and-conditions-supports-field"
  >
    <h4
      className="ds-h4"
    >
      Standards and Conditions
    </h4>
  </label>
  <div
    className="ds-u-margin-bottom--6 ds-u-margin-top--3"
  >
    <p
      className="ds-u-margin-bottom--3"
    >
      Include a description about how this activity will support the Medicaid standards and conditions 
      <a
        href="https://www.ecfr.gov/cgi-bin/text-idx?node=se42.4.433_1112"
        rel="noreferrer"
        target="_blank"
      >
        42 CFR 433.112
      </a>
      .
    </p>
    <Component
      control={
        Object {
          "_defaultValues": Object {
            "doesNotSupport": "does not support",
            "supports": "support",
          },
          "_executeSchema": [Function],
          "_fields": Object {},
          "_formState": Object {
            "dirtyFields": Object {},
            "errors": Object {},
            "isDirty": false,
            "isSubmitSuccessful": false,
            "isSubmitted": false,
            "isSubmitting": false,
            "isValid": false,
            "isValidating": false,
            "submitCount": 0,
            "touchedFields": Object {},
          },
          "_formValues": Object {
            "doesNotSupport": "does not support",
            "supports": "support",
          },
          "_getDirty": [Function],
          "_getFieldArray": [Function],
          "_getWatch": [Function],
          "_names": Object {
            "array": Set {},
            "mount": Set {},
            "unMount": Set {},
            "watch": Set {},
          },
          "_options": Object {
            "defaultValues": Object {
              "doesNotSupport": "does not support",
              "supports": "support",
            },
            "mode": "onBlur",
            "reValidateMode": "onBlur",
            "resolver": [Function],
            "shouldFocusError": true,
          },
          "_proxyFormState": Object {
            "dirtyFields": false,
            "errors": "all",
            "isDirty": false,
            "isValid": false,
            "isValidating": false,
            "touchedFields": false,
          },
          "_removeUnmounted": [Function],
          "_stateFlags": Object {
            "action": false,
            "mount": false,
            "watch": false,
          },
          "_subjects": Object {
            "array": Object {
              "next": [Function],
              "observers": Array [],
              "subscribe": [Function],
              "unsubscribe": [Function],
            },
            "state": Object {
              "next": [Function],
              "observers": Array [],
              "subscribe": [Function],
              "unsubscribe": [Function],
            },
            "watch": Object {
              "next": [Function],
              "observers": Array [],
              "subscribe": [Function],
              "unsubscribe": [Function],
            },
          },
          "_updateFieldArray": [Function],
          "_updateValid": [Function],
          "getFieldState": [Function],
          "register": [Function],
          "unregister": [Function],
        }
      }
      name="supports"
      render={[Function]}
    />
    <div
      className="ds-c-choice__checkedChild ds-u-margin-top--3"
    >
      <Component
        control={
          Object {
            "_defaultValues": Object {
              "doesNotSupport": "does not support",
              "supports": "support",
            },
            "_executeSchema": [Function],
            "_fields": Object {},
            "_formState": Object {
              "dirtyFields": Object {},
              "errors": Object {},
              "isDirty": false,
              "isSubmitSuccessful": false,
              "isSubmitted": false,
              "isSubmitting": false,
              "isValid": false,
              "isValidating": false,
              "submitCount": 0,
              "touchedFields": Object {},
            },
            "_formValues": Object {
              "doesNotSupport": "does not support",
              "supports": "support",
            },
            "_getDirty": [Function],
            "_getFieldArray": [Function],
            "_getWatch": [Function],
            "_names": Object {
              "array": Set {},
              "mount": Set {},
              "unMount": Set {},
              "watch": Set {},
            },
            "_options": Object {
              "defaultValues": Object {
                "doesNotSupport": "does not support",
                "supports": "support",
              },
              "mode": "onBlur",
              "reValidateMode": "onBlur",
              "resolver": [Function],
              "shouldFocusError": true,
            },
            "_proxyFormState": Object {
              "dirtyFields": false,
              "errors": "all",
              "isDirty": false,
              "isValid": false,
              "isValidating": false,
              "touchedFields": false,
            },
            "_removeUnmounted": [Function],
            "_stateFlags": Object {
              "action": false,
              "mount": false,
              "watch": false,
            },
            "_subjects": Object {
              "array": Object {
                "next": [Function],
                "observers": Array [],
                "subscribe": [Function],
                "unsubscribe": [Function],
              },
              "state": Object {
                "next": [Function],
                "observers": Array [],
                "subscribe": [Function],
                "unsubscribe": [Function],
              },
              "watch": Object {
                "next": [Function],
                "observers": Array [],
                "subscribe": [Function],
                "unsubscribe": [Function],
              },
            },
            "_updateFieldArray": [Function],
            "_updateValid": [Function],
            "getFieldState": [Function],
            "register": [Function],
            "unregister": [Function],
          }
        }
        name="doesNotSupport"
        render={[Function]}
      />
    </div>
  </div>
</Fragment>
`;
