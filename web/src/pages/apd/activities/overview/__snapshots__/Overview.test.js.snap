// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`activity overview/summary section (in the activity body) renders correctly 1`] = `
<Subsection
  headerClassName="header-with-top-margin"
  id="activity-overview-37"
  nested={false}
  resource="activities.overview"
>
  <Connect(Component)
    index={37}
    item={
      Object {
        "fundingSource": undefined,
        "name": undefined,
      }
    }
  />
  <div
    className="data-entry-box"
  >
    <FormLabel
      className="ds-c-label--full-width"
      component="label"
      fieldId="activity-short-overview-field"
      hint="Details for the activity go in the following sections."
    >
      Provide a short overview of the activity.
    </FormLabel>
    <Component
      control={
        Object {
          "_defaultValues": Object {
            "description": undefined,
            "summary": undefined,
          },
          "_executeSchema": [Function],
          "_fields": Object {},
          "_formState": Object {
            "dirtyFields": Object {},
            "errors": Object {},
            "isDirty": false,
            "isSubmitSuccessful": false,
            "isSubmitted": false,
            "isSubmitting": false,
            "isValid": false,
            "isValidating": false,
            "submitCount": 0,
            "touchedFields": Object {},
          },
          "_formValues": Object {
            "description": undefined,
            "summary": undefined,
          },
          "_getDirty": [Function],
          "_getFieldArray": [Function],
          "_getWatch": [Function],
          "_names": Object {
            "array": Set {},
            "mount": Set {},
            "unMount": Set {},
            "watch": Set {},
          },
          "_options": Object {
            "defaultValues": Object {
              "description": undefined,
              "summary": undefined,
            },
            "mode": "onBlur",
            "reValidateMode": "onBlur",
            "resolver": [Function],
            "shouldFocusError": true,
          },
          "_proxyFormState": Object {
            "dirtyFields": false,
            "errors": "all",
            "isDirty": false,
            "isValid": false,
            "isValidating": false,
            "touchedFields": false,
          },
          "_removeUnmounted": [Function],
          "_stateFlags": Object {
            "action": false,
            "mount": false,
            "watch": false,
          },
          "_subjects": Object {
            "array": Object {
              "next": [Function],
              "observers": Array [],
              "subscribe": [Function],
              "unsubscribe": [Function],
            },
            "state": Object {
              "next": [Function],
              "observers": Array [],
              "subscribe": [Function],
              "unsubscribe": [Function],
            },
            "watch": Object {
              "next": [Function],
              "observers": Array [],
              "subscribe": [Function],
              "unsubscribe": [Function],
            },
          },
          "_updateFieldArray": [Function],
          "_updateValid": [Function],
          "getFieldState": [Function],
          "register": [Function],
          "unregister": [Function],
        }
      }
      name="summary"
      render={[Function]}
    />
  </div>
  <Connect(Component)
    activityIndex={37}
  />
  <div
    className="data-entry-box"
  >
    <FormLabel
      className="ds-c-label--full-width"
      component="label"
      fieldId="activity-description-field"
      hint=""
    >
      Include as much detail as is necessary to explain the activity.
    </FormLabel>
    <Component
      control={
        Object {
          "_defaultValues": Object {
            "description": undefined,
            "summary": undefined,
          },
          "_executeSchema": [Function],
          "_fields": Object {},
          "_formState": Object {
            "dirtyFields": Object {},
            "errors": Object {},
            "isDirty": false,
            "isSubmitSuccessful": false,
            "isSubmitted": false,
            "isSubmitting": false,
            "isValid": false,
            "isValidating": false,
            "submitCount": 0,
            "touchedFields": Object {},
          },
          "_formValues": Object {
            "description": undefined,
            "summary": undefined,
          },
          "_getDirty": [Function],
          "_getFieldArray": [Function],
          "_getWatch": [Function],
          "_names": Object {
            "array": Set {},
            "mount": Set {},
            "unMount": Set {},
            "watch": Set {},
          },
          "_options": Object {
            "defaultValues": Object {
              "description": undefined,
              "summary": undefined,
            },
            "mode": "onBlur",
            "reValidateMode": "onBlur",
            "resolver": [Function],
            "shouldFocusError": true,
          },
          "_proxyFormState": Object {
            "dirtyFields": false,
            "errors": "all",
            "isDirty": false,
            "isValid": false,
            "isValidating": false,
            "touchedFields": false,
          },
          "_removeUnmounted": [Function],
          "_stateFlags": Object {
            "action": false,
            "mount": false,
            "watch": false,
          },
          "_subjects": Object {
            "array": Object {
              "next": [Function],
              "observers": Array [],
              "subscribe": [Function],
              "unsubscribe": [Function],
            },
            "state": Object {
              "next": [Function],
              "observers": Array [],
              "subscribe": [Function],
              "unsubscribe": [Function],
            },
            "watch": Object {
              "next": [Function],
              "observers": Array [],
              "subscribe": [Function],
              "unsubscribe": [Function],
            },
          },
          "_updateFieldArray": [Function],
          "_updateValid": [Function],
          "getFieldState": [Function],
          "register": [Function],
          "unregister": [Function],
        }
      }
      name="description"
      render={[Function]}
    />
  </div>
  <div
    className="data-entry-box"
  >
    <FormLabel
      className="ds-c-label--full-width"
      component="label"
      fieldId="activity-alternatives-field"
      hint=""
    >
      Statement of alternative considerations and supporting justification
    </FormLabel>
    <Instruction
      args={null}
      headingDisplay={
        Object {
          "className": "ds-h3",
          "level": "h3",
        }
      }
      labelFor={null}
      reverse={false}
      source="activities.overview.activityAlternativesInput"
    />
    <Connect(RichText)
      editorClassName="rte-textarea-l"
      id="activity-alternatives-field"
      onSync={[Function]}
    />
  </div>
  <hr />
</Subsection>
`;
