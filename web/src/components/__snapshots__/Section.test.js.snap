// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Section component renders correctly with no resource 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Section
    id={null}
    resource={null}
  >
    test child
  </Section>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        false,
        false,
        false,
        "test child",
      ],
      "className": "py2 border-bottom border-grey border-width-3",
      "id": null,
    },
    "ref": null,
    "rendered": Array [
      false,
      false,
      false,
      "test child",
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          false,
          false,
          false,
          "test child",
        ],
        "className": "py2 border-bottom border-grey border-width-3",
        "id": null,
      },
      "ref": null,
      "rendered": Array [
        false,
        false,
        false,
        "test child",
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Section component renders correctly with resource containing title, subheader, and helptext 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Section
    id={null}
    resource="activities.goals"
  >
    test child
  </Section>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <SectionTitle>
          Performance Goals and Benchmarks
        </SectionTitle>,
        <div>
          Explain the state’s goals for this activity.
        </div>,
        <SectionDesc>
          Goals are outcomes the state is pursuing through the activity. In addition to listing the goal, briefly describe how each goal relates to the vision identified in the program summary.
        </SectionDesc>,
        "test child",
      ],
      "className": "py2 border-bottom border-grey border-width-3",
      "id": null,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Performance Goals and Benchmarks",
        },
        "ref": null,
        "rendered": "Performance Goals and Benchmarks",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Explain the state’s goals for this activity.",
        },
        "ref": null,
        "rendered": "Explain the state’s goals for this activity.",
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Goals are outcomes the state is pursuing through the activity. In addition to listing the goal, briefly describe how each goal relates to the vision identified in the program summary.",
        },
        "ref": null,
        "rendered": "Goals are outcomes the state is pursuing through the activity. In addition to listing the goal, briefly describe how each goal relates to the vision identified in the program summary.",
        "type": [Function],
      },
      "test child",
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <SectionTitle>
            Performance Goals and Benchmarks
          </SectionTitle>,
          <div>
            Explain the state’s goals for this activity.
          </div>,
          <SectionDesc>
            Goals are outcomes the state is pursuing through the activity. In addition to listing the goal, briefly describe how each goal relates to the vision identified in the program summary.
          </SectionDesc>,
          "test child",
        ],
        "className": "py2 border-bottom border-grey border-width-3",
        "id": null,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Performance Goals and Benchmarks",
          },
          "ref": null,
          "rendered": "Performance Goals and Benchmarks",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Explain the state’s goals for this activity.",
          },
          "ref": null,
          "rendered": "Explain the state’s goals for this activity.",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Goals are outcomes the state is pursuing through the activity. In addition to listing the goal, briefly describe how each goal relates to the vision identified in the program summary.",
          },
          "ref": null,
          "rendered": "Goals are outcomes the state is pursuing through the activity. In addition to listing the goal, briefly describe how each goal relates to the vision identified in the program summary.",
          "type": [Function],
        },
        "test child",
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`SectionDesc component renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SectionDesc>
    test child
  </SectionDesc>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": "test child",
      "className": "mb4 text-xl",
    },
    "ref": null,
    "rendered": "test child",
    "type": "p",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "test child",
        "className": "mb4 text-xl",
      },
      "ref": null,
      "rendered": "test child",
      "type": "p",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`SectionTitle component renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SectionTitle>
    <div
      className="test child"
    />
  </SectionTitle>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="test child"
      />,
      "className": "mt1 mb2 h1 sm-h0 teal light",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "className": "test child",
      },
      "ref": null,
      "rendered": null,
      "type": "div",
    },
    "type": "h2",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="test child"
        />,
        "className": "mt1 mb2 h1 sm-h0 teal light",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "test child",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      "type": "h2",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Subsection component renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Subsection
    id={null}
    nested={false}
    open={false}
    resource={null}
  >
    test child
  </Subsection>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "bgColor": "white",
      "btnBgColor": "white",
      "btnColor": "blue",
      "children": <SubsectionChunk
        resource={null}
      >
        test child
      </SubsectionChunk>,
      "id": null,
      "nested": false,
      "onChange": null,
      "open": false,
      "sticky": true,
      "title": "",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": "test child",
        "resource": null,
      },
      "ref": null,
      "rendered": "test child",
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bgColor": "white",
        "btnBgColor": "white",
        "btnColor": "blue",
        "children": <SubsectionChunk
          resource={null}
        >
          test child
        </SubsectionChunk>,
        "id": null,
        "nested": false,
        "onChange": null,
        "open": false,
        "sticky": true,
        "title": "",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "test child",
          "resource": null,
        },
        "ref": null,
        "rendered": "test child",
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`SubsectionChunk component renders correctly with a resource with a subheader 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SubsectionChunk
    resource="activities.goals"
  >
    test child
  </SubsectionChunk>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div
          className="mb-tiny bold"
        >
          Explain the state’s goals for this activity.
        </div>,
        <HelpText
          reminder="activities.goals.reminder"
          text="activities.goals.helpText"
        />,
        "test child",
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Explain the state’s goals for this activity.",
          "className": "mb-tiny bold",
        },
        "ref": null,
        "rendered": "Explain the state’s goals for this activity.",
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "reminder": "activities.goals.reminder",
          "text": "activities.goals.helpText",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "test child",
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            className="mb-tiny bold"
          >
            Explain the state’s goals for this activity.
          </div>,
          <HelpText
            reminder="activities.goals.reminder"
            text="activities.goals.helpText"
          />,
          "test child",
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Explain the state’s goals for this activity.",
            "className": "mb-tiny bold",
          },
          "ref": null,
          "rendered": "Explain the state’s goals for this activity.",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "reminder": "activities.goals.reminder",
            "text": "activities.goals.helpText",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "test child",
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`SubsectionChunk component renders correctly with no resource 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SubsectionChunk
    resource={null}
  >
    test child
  </SubsectionChunk>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        false,
        <HelpText
          reminder="null.reminder"
          text="null.helpText"
        />,
        "test child",
      ],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "reminder": "null.reminder",
          "text": "null.helpText",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "test child",
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          false,
          <HelpText
            reminder="null.reminder"
            text="null.helpText"
          />,
          "test child",
        ],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "reminder": "null.reminder",
            "text": "null.helpText",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "test child",
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
