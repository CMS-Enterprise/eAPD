// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`notification component renders correctly if there is message 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Notification
    closeNotification={[Function]}
    duration={3000}
    messageInfo={
      Object {
        "key": "",
        "message": "hello",
      }
    }
    open={true}
    processQueue={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": "",
    "nodeType": "class",
    "props": Object {
      "ContentProps": Object {
        "aria-describedby": "notify-msg",
      },
      "anchorOrigin": Object {
        "horizontal": "right",
        "vertical": "bottom",
      },
      "autoHideDuration": 3000,
      "message": <span
        className="sans"
        id="notify-msg"
      >
        hello
      </span>,
      "onClose": [Function],
      "onExited": [Function],
      "open": true,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": "",
      "nodeType": "class",
      "props": Object {
        "ContentProps": Object {
          "aria-describedby": "notify-msg",
        },
        "anchorOrigin": Object {
          "horizontal": "right",
          "vertical": "bottom",
        },
        "autoHideDuration": 3000,
        "message": <span
          className="sans"
          id="notify-msg"
        >
          hello
        </span>,
        "onClose": [Function],
        "onExited": [Function],
        "open": true,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`notification component renders correctly if there is no message 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Notification
    closeNotification={[Function]}
    duration={3000}
    messageInfo={Object {}}
    open={true}
    processQueue={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
